=head1 NAME

MooX::Options::Manual::Man - More documentation for the man option

=head1 DESCRIPTION

You can add more documentation for the man option. This is the long option.

=head1 SYNOPSIS

  myTool --man

=head1 PARAMETERS

=head2 description

The description of your tool.

  use MooX::Options description => 'Description of your tools'

=head2 authors

The list of authors of your tool.

  use MooX::Options authors => 'Celogeek <me@celogeek.com>'
  use MooX::Options authors => ['Celogeek <me@celogeek.com', 'Jens Rehsack']

=head2 synopsis

You can define a full example in pod format. This will be placed in the synopsis section

  use MooX::Options synopsis => '
    A example of my tools

      myTool --run
  '

This should not be very easy to do it this way, but you can also extract it from your own script :

  use Moo;
  use Pod::POM;
  my $synopsis = "";
  BEGIN {
      my $parser = Pod::POM->new;
      my $pom = $parser->parse(__FILE__) or die $parser->error();
      for my $head1 ($pom->head1) {
          if ($head1->title eq 'SYNOPSIS') {
              $synopsis = $head1->content;
              last;
          }
      }
  }
  use MooX::Options synopsis => $synopsis;

=head1 OPTIONS

=head2 long_doc

If a 'long_doc' parameter is present, it will replace the 'doc' or 'documentation' to generate a long doc for the man page.

  option 'foo' => (
    is => 'ro',
    doc => 'bar',
    long_doc => 'this is a bar example that will appear in my man page',
  );

The 'long_doc' will be write in place of the pod documentation. All the rules of pod, is applied.
For instance, to add a new paragraph, you need to let a empty line.

  option 'foo' => (
    is => 'ro',
    doc => 'bar',
    long_doc => join("\n\n", "first paragraph", "second paragraph"),
  );

See the L<perlpod> for more explanation.

=head1 SEE ALSO

L<MooX::Options>

=head1 AUTHOR

celogeek <me@celogeek.com>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by celogeek <me@celogeek.com>.

This software is copyright (c) 2017 by Jens Rehsack.

This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.

=cut
